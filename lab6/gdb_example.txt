Script started on 2021-02-26 15:10:45-0500
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ gdb overflow
GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list
1       #include <stdio.h>
2       
3       #define SIZE 4
4       #define OVERFLOW 5
5       
6       int main() {
7           int index = 0;
8           int i;
9           int before[SIZE] = {10, 10, 10, 10};
10          int a[SIZE] = {0, 0, 0, 0};
(gdb) 
11          int after[SIZE] = {10, 10, 10, 10};
12      
13          printf("Address of the variables:\n");
14          for (index = 0; index < SIZE; index++) {
15              printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16          }
17          for (index = 0; index < SIZE; index++) {
18              printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19          }
20          for (index = 0; index < SIZE; index++) {
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22          }
23          printf("%lx -> &i\n", (unsigned long)&i);
24          printf("%lx -> &index\n", (unsigned long)&index);
25          printf("\n");
26      
27      
28          printf("Initial values:\n");
29          printf("i = %d\n", i);
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33          printf("\n");
34      
35      
36          for (i = 0; i < OVERFLOW; i++) {
37              a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) break 36 [K
Breakpoint 1 at 0x959: file overflow.c, line 36.
(gdb) break 28
Breakpoint 2 at 0x8c7: file overflow.c, line 28.
(gdb) run
Starting program: /h/u13/c8/00/honcasey/honcasey/lab6/overflow 
Address of the variables:
7fffffffe950 -> &after[0]
7fffffffe954 -> &after[1]
7fffffffe958 -> &after[2]
7fffffffe95c -> &after[3]
7fffffffe940 -> &a[0]
7fffffffe944 -> &a[1]
7fffffffe948 -> &a[2]
7fffffffe94c -> &a[3]
7fffffffe930 -> &before[0]
7fffffffe934 -> &before[1]
7fffffffe938 -> &before[2]
7fffffffe93c -> &before[3]
7fffffffe92c -> &i
7fffffffe928 -> &index


Breakpoint 2, main () at overflow.c:28
28          printf("Initial values:\n");
(gdb) continue
Continuing.
Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe950
(gdb) n
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print ([K&(after[0])
$2 = (int *) 0x7fffffffe950
(gdb) n
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) print (&af[K[K[Kaf[K[K[K&(after[4][K[K[K[K[K[K[K[4])
$3 = (int *) 0x7fffffffe950
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) quit
A debugging session is active.

        Inferior 1 [process 2523] will be killed.

Quit anyway? (y or n) y
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ exit
exit

Script done on 2021-02-26 15:12:37-0500
          printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19          }
20          for (index = 0; index < SIZE; index++) {
(gdb) 
21              printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22          }
23          printf("%lx -> &i\n", (unsigned long)&i);
24          printf("%lx -> &index\n", (unsigned long)&index);
25          printf("\n");
26      
27      
28          printf("Initial values:\n");
29          printf("i = %d\n", i);
30          printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
31          printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32          printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33          printf("\n");
34      
35      
36          for (i = 0; i < OVERFLOW; i++) {
37              a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) break 36 [K
Breakpoint 1 at 0x959: file overflow.c, line 36.
(gdb) break 28
Breakpoint 2 at 0x8c7: file overflow.c, line 28.
(gdb) run
Starting program: /h/u13/c8/00/honcasey/honcasey/lab6/overflow 
Address of the variables:
7fffffffe950 -> &after[0]
7fffffffe954 -> &after[1]
7fffffffe958 -> &after[2]
7fffffffe95c -> &after[3]
7fffffffe940 -> &a[0]
7fffffffe944 -> &a[1]
7fffffffe948 -> &a[2]
7fffffffe94c -> &a[3]
7fffffffe930 -> &before[0]
7fffffffe934 -> &before[1]
7fffffffe938 -> &before[2]
7fffffffe93c -> &before[3]
7fffffffe92c -> &i
7fffffffe928 -> &index


Breakpoint 2, main () at overflow.c:28
28          printf("Initial values:\n");
(gdb) continue
Continuing.
Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe950
(gdb) n
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print ([K&(after[0])
$2 = (int *) 0x7fffffffe950
(gdb) n
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10,           a[i] = i * 10;
38              printf("i = %d\n", i);
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) break 36 [K
Breakpoint 1 at 0x959: file overflow.c, line 36.
(gdb) break 28
Breakpoint 2 at 0x8c7: file overflow.c, line 28.
(gdb) run
Starting program: /h/u13/c8/00/honcasey/honcasey/lab6/overflow 
Address of the variables:
7fffffffe950 -> &after[0]
7fffffffe954 -> &after[1]
7fffffffe958 -> &after[2]
7fffffffe95c -> &after[3]
7fffffffe940 -> &a[0]
7fffffffe944 -> &a[1]
7fffffffe948 -> &a[2]
7fffffffe94c -> &a[3]
7fffffffe930 -> &before[0]
7fffffffe934 -> &before[1]
7fffffffe938 -> &before[2]
7fffffffe93c -> &before[3]
7fffffffe92c -> &i
7fffffffe928 -> &index


Breakpoint 2, main () at overflow.c:28
28          printf("Initial values:\n");
(gdb) continue
Continuing.
Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 1, main () at overflow.c:36
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print &(after[0])
$1 = (int *) 0x7fffffffe950
(gdb) n
i = 0
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 0, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) n
37              a[i] = i * 10;
(gdb) n
38              printf("i = %d\n", i);
(gdb) print ([K&(after[0])
$2 = (int *) 0x7fffffffe950
(gdb) n
i = 1
39              printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) n
before = {10, 10, 10, 10}
40              printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) n
a = {0, 10, 0, 0}
41              printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) n
after = {10, 10, 10, 10}
36          for (i = 0; i < OVERFLOW; i++) {
(gdb) print (&af[K[K[Kaf[K[K[K&(after[4][K[K[K[K[K[K[K[4])
$3 = (int *) 0x7fffffffe950
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) quit
A debugging session is active.

        Inferior 1 [process 2523] will be killed.

Quit anyway? (y or n) y
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ exit
exit
Script done, file is typescript
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ ls
copy.c  overflow  overflow.c  typescript
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ mv typescript gdb_example.txt
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ ls
copy.c  gdb_example.txt  overflow  overflow.c
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ git add gdb_example.txt
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ quit
bash: quit: command not found
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ exit
exit
Script done, file is typescript
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ exit
exit
Script done, file is typescript
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ quit
bash: quit: command not found
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ q
bash: q: command not found
]0;honcasey@wolf:/h/u13/c8/00/honcasey/honcasey/lab6wolf:~/honcasey/lab6$ exit
